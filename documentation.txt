Next.js 15 & PostgreSQL Udemy Course - WebDevEducation (Tom Phillips)


Section 01: Introduction

01. Introduction

02. Important! Read this before you begin the course (Github repo etc)

03. Udemy ratings and reviews

04. Helpful tools and resources for this course

05. Project setup
-open web page: https://nextjs.org/
-open terminal and type command: npx create-next-app@latest (project name)
-open web page: https://ui.shadcn.com/
-open terminal and type command: npx shadcn@latest init
-open terminal and type command: npm run dev
-open http://localhost:3000/ in your browser


Section 02: Implement auth

06. Create the top navbar
-in layout.tsx file create variable const poppins
-import font Poppins from package next/font/google
-in jsx add to body element className poppins.variable
-create nav element with Tailwind CSS classes
-open web page: https://lucide.dev/
-import icon ChartColumnBigIcon from package lucide-react
-open link: https://nextjs.org/docs/pages/api-reference/components/link
-import Link from package next/link
-in nav element add Link component and icon ChartColumnBigIcon
-add prop href and className to Link component
-add prop className to ChartColumnBigIcon icon
-in nav element create div element to display auth button text

07. Set up clerk auth
-open web page: https://clerk.com/
-create new Clerk auth app
-open terminal and type command: npm install @clerk/nextjs
-create .env.local and example.env files
-in .env.local file create variables NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY and CLERK_SECRET_KEY
-in example.env file add the example of env variables
-create middleware.ts file
-in middleware.ts file copy and paste code from documentation
-in component layout.tsx import component ClerkProvider from package @clerk/nextjs
-import other Clerk components from the same package
-in jsx add component SignedOutButton 
-in component SignedOutButton create div element 
-in div element add components SignInButton and SignUpButton
-open http://localhost:3000/ in your browser to see buttons

08. Create test account and render user dropdown
-open link: https://ui.shadcn.com/docs/components/button
-open terminal and type command: npx shadcn@latest add button
-after this command folders components and ui are created together with component button.tsx
-in component layout.tsx import component Button from folder ui/button.tsx
-import other components from package @clerk/nextjs
-in jsx inside component SignedOutButton add components Button
-add to Button component props ashChild, variant and className
-in div element add component SignedIn
-create component user-dropdown.tsx
-in component user-dropdown.tsx import component UserButton from package '@clerk/
-add 'use client' directive
-in jsx add component UserButton with prop showName
-in component layout.tsx import component UserDropdown from component user-dropdown.tsx
-in component SignedIn add component UserDropdown
-in user-dropdown component add to component UserButton prop appearance
-open http://localhost:3000/ in your browser to sign up with new 
-open Clerk and project dashboard to see list of all users


Section 03: Build the create new transaction functionality

09. Create the new transaction page
-add new favicon icon in folder app
-change app title and description in component layout.tsx
-in folder app create folders dashboard, transactions, new and component page.tsx
-in component new/page.tsx create function NewTransactionPage()
-export function NewTransactionPage() as default
-open http://localhost:3000/dashboard/transactions/new in your browser
-open link: https://ui.shadcn.com/docs/components/breadcrumb
-open terminal and type command: npx shadcn@latest add breadcrumb
-in component new/page.tsx import breadcrumb components from component ui/breadcrumb.tsx
-in jsx add to parent div element Tailwind CSS classes
-in parent div element add component Breadcrumb
-in component Breadcrumb add component BreadcrumbList
-in component BreadcrumbList add three components BreadcrumbItem and two components BreadcrumbSeparator
-open link: https://ui.shadcn.com/docs/components/card
-open terminal and type command: npx shadcn@latest add card
-in component new/page.tsx import card component from component ui/card.tsx
-in parent div element add component Card
-in component app/page.tsx create main element as parent element
-in main element create div element
-in div element create elements h1 and p

10. Implement route protection for all dashboard routes
-open link: https://clerk.com/docs/references/nextjs/clerk-middleware
-in middleware.ts import function createRouteMatcher from package @clerk/nextjs/server
-create variable const isProtectedRoute
-in function clerkMiddleware() pass anonymous async function as argument with parameters auth and req
-in anonymous async function add condition if (isProtectedRoute(req))
-in if condition invoke function await auth.protect()
-in component user-dropdown.tsx import function useRouter from package next/navigation
-import icon ChartColumnBigIcon from package lucide-react
-create variable const router
-in jsx in component UserButton add component UserButton.MenuItems
-in component UserButton.MenuItems add component UserButton.Action with prop label, labelIcon and event onClick
-in folder dashboard create component page.tsx
-in component dashboard/page.tsx create and export function DashboardPage()
-in component dashboard/transactions create component page.tsx
-in component dashboard/transactions/page.tsx create and export function TransactionsPage

11. Create the transaction form schema with zod
-open link: https://ui.shadcn.com/docs/components/form
-open terminal and type command: npx shadcn@latest add form
-open link: https://ui.shadcn.com/docs/components/calendar
-open terminal and type command: npx shadcn@latest add calendar
-in folder lib create files validators.ts and constants.ts
-in validators.ts file create and export variable const transactionFormSchema
-in constants.ts file create and export variable const defaultValues
-in folder components create folder transactions and component transaction-form.tsx
-in component transaction-form.tsx create and export function TransactionForm()
-import functions zodResolver, useForm and object z
-import variables transactionFormSchema and defaultValues
-create variable const form

12. Render the first form field
-open link: https://ui.shadcn.com/docs/components/select
-open terminal and type command: npx shadcn@latest add select
-in component transaction-form.tsx import form components from component ui/form.tsx
-in component transaction-form.tsx import select components from component ui/select.tsx
-in jsx add component Form as parent component
-in component Form create form element with event onSubmit
-create function handleSubmit()
-in event onSubmit pass the function form.handleSubmit(handleSubmit)
-in form element add component FormField with prop control, name and render for transaction type
-in form element create fieldset element with prop className
-add Tailwind CSS classes to element fieldset
-in fieldset element add component FormField for transaction type
-add one more component FormField for category Id
-add Tailwind CSS class w-full class to components SelectTrigger
-in component new/page.tsx import component TransactionForm from component transaction-for.tsx

13. Finish rendering the remaining form fields
-open link: https://ui.shadcn.com/docs/components/date-picker
-open link: https://ui.shadcn.com/docs/components/popover
-open terminal and type command: npx shadcn@latest add popover
-open link: https://ui.shadcn.com/docs/components/input
-open terminal and type command: npx shadcn@latest add input
-in component transaction-form.tsx import function format from package date-fns
-import icon Calendar as CalendarIcon from package lucide-react
-import function cn from utils.ts file
-import component Button from component ui/button.tsx
-import component Calendar from component ui/calendar.tsx
-import components Popover,PopoverContent and PopoverTrigger from component ui/popover.tsx
-import component Input from component ui/input.tsx
-add component FormField for transaction date
-add component FormField for amount
-create another component fieldset with Tailwind CSS flex classes
-in fieldset element add component FormField for description
-add component Button to submit the form

14. Create the PostgreSQL database on Neon
-open web page: https://neon.tech/
-create new database NextCash
-in .env.local file add variable DATABASE_URL
-in example.env file add the example of env variable
-open web page: https://orm.drizzle.team/
-open link: https://orm.drizzle.team/docs/get-started/neon-new
-follow the instructions from documentation
-open terminal and type command: npm i drizzle-orm @neondatabase/serverless dotenv
-open terminal and type command: npm i -D drizzle-kit tsx
-open terminal and type command: npx drizzle-kit push

15. Seed the database with categories data
-create seed.ts file
-in seed.ts file create array: const categoriesSeedData
-create and invoke async function main()
-open terminal and type command: npx tsx seed.ts
-open database on Neon and see categories table

16. Query for the categories data
-open link: https://www.npmjs.com/package/server-only
-open terminal and type command: npm i server-only
-create folder server and getCategories.ts file
-in getCategories.ts file import directive sever-only
-import object db from db/index.ts file
-import variable categoriesTable from schema.ts file
-create and export async function getCategories()
-in component new/page.tsx import function getCategories from getCategories.ts file
-add async keyword to function NewTransactionPage()
-create variable const categories
-in jsx add prop categories to component TransactionForm
-create folder types and Category.ts file
-in Category.ts file create and export type Category
-in component transaction-form.tsx import type Category
-add to function TransactionForm() parameter transaction with type Category
-create variable const filteredCategories
-create variable const transactionType
-in component SelectContent invoke the function filteredCategories.map()
-in prop onValueChange pass the anonymous function with parameter newValue

17. Build the createTransaction server action
-in component transaction-form.tsx add to function TransactionForm() prop onSubmit
-delete function handleSubmit
-in prop onSubmit pass the function form.handleSubmit(onSubmit)
-create type TransactionFormProps
-add to function TransactionForm() parameters type TransactionFormProps
-create component new-transaction-form.tsx
-in new-transaction-form.tsx create and export function NewTransactionForm()
-import component TransactionForm from component transaction-form.tsx
-create async function handleSubmit()
-in jsx add component TransactionForm with props categories and onSubmit
-in component new/page.tsx import component NewTransactionForm from component new-transaction-form.tsx
-in jsx add component NewTransactionForm with prop categories
-in folder new create actions.ts file
-in actions.ts file add directive 'use server'
-create and export async function createTransaction()
-add parameter data to function createTransaction()
-import function auth from package clerk/nextjs/server
-destructure variable const { userId } from function await auth()
-add condition if (!userId)
-in validators.ts file create and export variable const transactionSchema
-import function subYears from package date-fns
-in new/actions.ts file import variable transactionSchema
-in function createTransaction() create variable const validation
-add the condition if (!validation.success)
-import object db from db/index.ts file
-import variable transactionsTable from schema.ts file
-invoke the function await db.insert()
-the value of function await db.insert() store in variable const [transaction]
-in component new-transaction-form.tsx import function format from package date-fns
-import function createTransaction from actions.ts file
-in function handleSubmit() invoke function await createTransaction()
-the value of function await createTransaction() store in variable const result

18. Finish the create transaction functionality
-open link: https://ui.shadcn.com/docs/components/toast
-open web page: https://sonner.emilkowal.ski/
-open link: https://ui.shadcn.com/docs/components/sonner
-open terminal and type command: npx shadcn@latest add sonner
-in component layout.tsx import component Toaster from component ui/sonner.tsx
-in component new-transaction-form.tsx add condition if (result.error)
-import function toast from package sonner
-in condition if (result.error) invoke function toast()
-open route: http://localhost:3000/dashboard/transactions/new and create transaction
-in component transaction-form.tsx add to fieldset elements prop disabled

19. Handle error and success states for create transaction
-in component new-transaction-form.tsx, in function handleSubmit() invoke function toast.success('Transaction created')
-import function useRouter from package next/navigation
-create variable const router
-invoke function router.push()
-open route: http://localhost:3000/dashboard/transactions/new and create transaction
-if everything is ok you should be redirected to route, for example: http://localhost:3000/dashboard/transactions?month=1&year=2025


Section 04: Build the transactions page

20. Build out the basic transactions page UI
-in component transactions/page.tsx import breadcrumb components from component ui/breadcrumb.tsx
-import card components from component ui/card.tsx
-add keyword async to function TransactionsPage()
-add to function TransactionsPage() prop searchParams
-add to prop searchParams type Promise
-create variable const searchParamsValues 
-in validators.ts file create and export variable const searchTransactionSchema
-in component transactions/page.tsx import variable searchTransactionSchema
-create variable const search
-destructure variables const { month, year } from variable search
-create variable const selectedDate
-import function format from package date-fns
-in component CardTitle invoke function format()
-open route: http://localhost:3000/dashboard/transactions
-open route: http://localhost:3000/dashboard/transactions?year=2024&month=12